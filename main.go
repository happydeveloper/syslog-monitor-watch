package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"net/http"
	"net/smtp"
	"os"
	"os/signal"
	"regexp"
	"runtime"
	"strings"
	"syscall"
	"time"

	"github.com/hpcloud/tail"
	"github.com/sirupsen/logrus"
)

type EmailConfig struct {
	SMTPServer   string
	SMTPPort     string
	Username     string
	Password     string
	To           []string
	From         string
	Enabled      bool
}

type SlackConfig struct {
	WebhookURL string
	Channel    string
	Username   string
	Enabled    bool
}

type SlackMessage struct {
	Channel   string             `json:"channel,omitempty"`
	Username  string             `json:"username,omitempty"`
	Text      string             `json:"text,omitempty"`
	IconEmoji string             `json:"icon_emoji,omitempty"`
	Attachments []SlackAttachment `json:"attachments,omitempty"`
}

type SlackAttachment struct {
	Color     string       `json:"color,omitempty"`
	Title     string       `json:"title,omitempty"`
	Text      string       `json:"text,omitempty"`
	Fields    []SlackField `json:"fields,omitempty"`
	Timestamp int64        `json:"ts,omitempty"`
}

type SlackField struct {
	Title string `json:"title"`
	Value string `json:"value"`
	Short bool   `json:"short"`
}

type SyslogMonitor struct {
	logFile       string
	filters       []string
	keywords      []string
	outputFile    string
	logger        *logrus.Logger
	emailConfig   *EmailConfig
	slackConfig   *SlackConfig
	aiAnalyzer    *AIAnalyzer
	systemMonitor *SystemMonitor
	logParser     *LogParserManager
	aiEnabled     bool
	systemEnabled bool
}

func NewSyslogMonitor(logFile, outputFile string, filters, keywords []string, emailConfig *EmailConfig, slackConfig *SlackConfig, aiEnabled, systemEnabled bool) *SyslogMonitor {
	logger := logrus.New()
	logger.SetLevel(logrus.InfoLevel)
	logger.SetFormatter(&logrus.TextFormatter{
		FullTimestamp: true,
		TimestampFormat: "2006-01-02 15:04:05",
	})

	if outputFile != "" {
		file, err := os.OpenFile(outputFile, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
		if err == nil {
			logger.SetOutput(file)
		}
	}

	var aiAnalyzer *AIAnalyzer
	var systemMonitor *SystemMonitor
	
	if aiEnabled {
		aiAnalyzer = NewAIAnalyzer()
	}
	
	if systemEnabled {
		systemMonitor = NewSystemMonitor(time.Minute * 5) // 5Î∂Ñ Í∞ÑÍ≤©ÏúºÎ°ú ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅ
	}

	return &SyslogMonitor{
		logFile:       logFile,
		filters:       filters,
		keywords:      keywords,
		outputFile:    outputFile,
		logger:        logger,
		emailConfig:   emailConfig,
		slackConfig:   slackConfig,
		aiAnalyzer:    aiAnalyzer,
		systemMonitor: systemMonitor,
		logParser:     NewLogParserManager(),
		aiEnabled:     aiEnabled,
		systemEnabled: systemEnabled,
	}
}

func (sm *SyslogMonitor) shouldFilter(line string) bool {
	if len(sm.filters) == 0 {
		return false
	}

	for _, filter := range sm.filters {
		matched, _ := regexp.MatchString(filter, line)
		if matched {
			return true
		}
	}
	return false
}

func (sm *SyslogMonitor) containsKeyword(line string) bool {
	if len(sm.keywords) == 0 {
		return true // ÌÇ§ÏõåÎìúÍ∞Ä ÏóÜÏúºÎ©¥ Î™®Îì† ÎùºÏù∏ÏùÑ Ìè¨Ìï®
	}

	lowLine := strings.ToLower(line)
	for _, keyword := range sm.keywords {
		if strings.Contains(lowLine, strings.ToLower(keyword)) {
			return true
		}
	}
	return false
}

func (sm *SyslogMonitor) parseSyslogLine(line string) map[string]string {
	result := make(map[string]string)
	result["raw"] = line
	result["timestamp"] = time.Now().Format("2006-01-02 15:04:05")

	// Í∏∞Î≥∏Ï†ÅÏù∏ syslog ÌååÏã± (Í∞ÑÎã®Ìïú Î≤ÑÏ†Ñ)
	parts := strings.Fields(line)
	if len(parts) >= 3 {
		result["month"] = parts[0]
		result["day"] = parts[1]
		result["time"] = parts[2]
		if len(parts) >= 4 {
			result["host"] = parts[3]
			if len(parts) >= 5 {
				result["service"] = parts[4]
				result["message"] = strings.Join(parts[5:], " ")
			}
		}
	}

	return result
}

func (sm *SyslogMonitor) sendEmail(subject, body string) error {
	if !sm.emailConfig.Enabled {
		return nil
	}

	// Gmail SMTP ÏÇ¨Ïö© Ïãú Í∞ÑÎã®Ìïú Î∞©Î≤ï ÏÇ¨Ïö©
	if sm.emailConfig.SMTPServer == "smtp.gmail.com" {
		return sm.sendGmailEmail(subject, body)
	}

	// Í∏∞ÌÉÄ SMTP ÏÑúÎ≤ÑÏö© ÏùºÎ∞òÏ†ÅÏù∏ Î∞©Î≤ï
	return sm.sendGenericEmail(subject, body)
}

func (sm *SyslogMonitor) sendGmailEmail(subject, body string) error {
	// Gmail SMTP ÏÑ§Ï†ï
	auth := smtp.PlainAuth("", sm.emailConfig.Username, sm.emailConfig.Password, sm.emailConfig.SMTPServer)

	// Ïù¥Î©îÏùº Î©îÏãúÏßÄ Íµ¨ÏÑ±
	message := []byte(fmt.Sprintf("From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n%s",
		sm.emailConfig.From,
		strings.Join(sm.emailConfig.To, ","),
		subject,
		body))

	// Gmail SMTP ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ° (Ìè¨Ìä∏ 587, STARTTLS)
	err := smtp.SendMail(
		sm.emailConfig.SMTPServer+":"+sm.emailConfig.SMTPPort,
		auth,
		sm.emailConfig.From,
		sm.emailConfig.To,
		message,
	)

	if err != nil {
		return fmt.Errorf("failed to send Gmail email: %v", err)
	}

	sm.logger.Infof("‚úÖ Gmail email sent successfully to: %s", strings.Join(sm.emailConfig.To, ", "))
	return nil
}

func (sm *SyslogMonitor) sendSlackMessage(message SlackMessage) error {
	if !sm.slackConfig.Enabled {
		return nil
	}

	// Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
	if message.Channel == "" && sm.slackConfig.Channel != "" {
		message.Channel = sm.slackConfig.Channel
	}
	if message.Username == "" && sm.slackConfig.Username != "" {
		message.Username = sm.slackConfig.Username
	}

	jsonData, err := json.Marshal(message)
	if err != nil {
		return fmt.Errorf("failed to marshal slack message: %v", err)
	}

	resp, err := http.Post(sm.slackConfig.WebhookURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return fmt.Errorf("failed to send slack message: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("slack webhook returned status: %d", resp.StatusCode)
	}

	sm.logger.Infof("‚úÖ Slack message sent successfully to channel: %s", message.Channel)
	return nil
}

func (sm *SyslogMonitor) detectLoginPattern(line string) (bool, map[string]string) {
	patterns := map[string]*regexp.Regexp{
		"ssh_success": regexp.MustCompile(`(?i)sshd.*Accepted\s+(password|publickey|keyboard-interactive)\s+for\s+(\w+)\s+from\s+([\d\.]+)`),
		"ssh_failed":  regexp.MustCompile(`(?i)sshd.*Failed\s+(password|publickey)\s+for\s+(\w+)\s+from\s+([\d\.]+)`),
		"sudo_usage":  regexp.MustCompile(`(?i)sudo.*USER=(\w+).*COMMAND=(.+)`),
		"user_login":  regexp.MustCompile(`(?i)(login|session).*user\s+(\w+)`),
		"web_login":   regexp.MustCompile(`(?i)(login|authentication).*user[:\s]+(\w+).*from[:\s]+([\d\.]+)`),
	}

	for patternName, pattern := range patterns {
		matches := pattern.FindStringSubmatch(line)
		if matches != nil {
			result := map[string]string{
				"pattern": patternName,
				"line":    line,
			}

			switch patternName {
			case "ssh_success":
				result["method"] = matches[1]
				result["user"] = matches[2]
				result["ip"] = matches[3]
				result["status"] = "success"
			case "ssh_failed":
				result["method"] = matches[1]
				result["user"] = matches[2]
				result["ip"] = matches[3]
				result["status"] = "failed"
			case "sudo_usage":
				result["user"] = matches[1]
				result["command"] = matches[2]
				result["status"] = "sudo"
			case "user_login":
				result["user"] = matches[2]
				result["status"] = "login"
			case "web_login":
				result["user"] = matches[2]
				result["ip"] = matches[3]
				result["status"] = "web_login"
			}
			return true, result
		}
	}
	return false, nil
}

func (sm *SyslogMonitor) createLoginSlackMessage(loginInfo map[string]string, parsed map[string]string) SlackMessage {
	var color, title, emoji string
	var fields []SlackField

	switch loginInfo["status"] {
	case "success":
		color = "good"
		title = "‚úÖ SSH Login Success"
		emoji = ":white_check_mark:"
		fields = []SlackField{
			{Title: "User", Value: loginInfo["user"], Short: true},
			{Title: "IP Address", Value: loginInfo["ip"], Short: true},
			{Title: "Method", Value: loginInfo["method"], Short: true},
			{Title: "Host", Value: parsed["host"], Short: true},
		}
	case "failed":
		color = "danger"
		title = "‚ùå SSH Login Failed"
		emoji = ":x:"
		fields = []SlackField{
			{Title: "User", Value: loginInfo["user"], Short: true},
			{Title: "IP Address", Value: loginInfo["ip"], Short: true},
			{Title: "Method", Value: loginInfo["method"], Short: true},
			{Title: "Host", Value: parsed["host"], Short: true},
		}
	case "sudo":
		color = "warning"
		title = "‚ö° Sudo Command Executed"
		emoji = ":zap:"
		fields = []SlackField{
			{Title: "User", Value: loginInfo["user"], Short: true},
			{Title: "Host", Value: parsed["host"], Short: true},
			{Title: "Command", Value: loginInfo["command"], Short: false},
		}
	case "web_login":
		color = "good"
		title = "üåê Web Login Detected"
		emoji = ":globe_with_meridians:"
		fields = []SlackField{
			{Title: "User", Value: loginInfo["user"], Short: true},
			{Title: "IP Address", Value: loginInfo["ip"], Short: true},
			{Title: "Host", Value: parsed["host"], Short: true},
		}
	default:
		color = "#36a64f"
		title = "üë§ User Activity"
		emoji = ":bust_in_silhouette:"
		fields = []SlackField{
			{Title: "User", Value: loginInfo["user"], Short: true},
			{Title: "Host", Value: parsed["host"], Short: true},
			{Title: "Activity", Value: loginInfo["status"], Short: true},
		}
	}

	attachment := SlackAttachment{
		Color:     color,
		Title:     title,
		Fields:    fields,
		Timestamp: time.Now().Unix(),
	}

	return SlackMessage{
		Text:      fmt.Sprintf("%s *%s*", emoji, title),
		IconEmoji: ":robot_face:",
		Username:  "Syslog Monitor",
		Attachments: []SlackAttachment{attachment},
	}
}

func (sm *SyslogMonitor) sendGenericEmail(subject, body string) error {
	// Ïù¥Î©îÏùº Î©îÏãúÏßÄ Íµ¨ÏÑ±
	message := fmt.Sprintf("From: %s\r\n", sm.emailConfig.From)
	message += fmt.Sprintf("To: %s\r\n", strings.Join(sm.emailConfig.To, ","))
	message += fmt.Sprintf("Subject: %s\r\n", subject)
	message += "Content-Type: text/plain; charset=UTF-8\r\n"
	message += "\r\n"
	message += body

	// SMTP ÏÑúÎ≤Ñ Ïó∞Í≤∞
	serverName := sm.emailConfig.SMTPServer + ":" + sm.emailConfig.SMTPPort

	// Ïù∏Ï¶ù ÏÑ§Ï†ï
	var auth smtp.Auth
	if sm.emailConfig.Username != "" && sm.emailConfig.Password != "" {
		auth = smtp.PlainAuth("", sm.emailConfig.Username, sm.emailConfig.Password, sm.emailConfig.SMTPServer)
	}

	// TLS ÏÑ§Ï†ï
	tlsConfig := &tls.Config{
		InsecureSkipVerify: false,
		ServerName:         sm.emailConfig.SMTPServer,
	}

	// Ìè¨Ìä∏Ïóê Îî∞Îùº Îã§Î•∏ Ïó∞Í≤∞ Î∞©Ïãù ÏÇ¨Ïö©
	if sm.emailConfig.SMTPPort == "465" {
		// SSL/TLS ÏßÅÏ†ë Ïó∞Í≤∞ (Ìè¨Ìä∏ 465)
		conn, err := tls.Dial("tcp", serverName, tlsConfig)
		if err != nil {
			return fmt.Errorf("failed to connect to SMTP server (SSL): %v", err)
		}
		defer conn.Close()

		client, err := smtp.NewClient(conn, sm.emailConfig.SMTPServer)
		if err != nil {
			return fmt.Errorf("failed to create SMTP client: %v", err)
		}
		defer client.Quit()

		if auth != nil {
			if err := client.Auth(auth); err != nil {
				return fmt.Errorf("SMTP authentication failed: %v", err)
			}
		}

		return sm.sendEmailMessage(client, message)

	} else {
		// STARTTLS Ïó∞Í≤∞ (Ìè¨Ìä∏ 587)
		client, err := smtp.Dial(serverName)
		if err != nil {
			return fmt.Errorf("failed to connect to SMTP server: %v", err)
		}
		defer client.Quit()

		// STARTTLS ÏãúÏûë
		if ok, _ := client.Extension("STARTTLS"); ok {
			if err := client.StartTLS(tlsConfig); err != nil {
				return fmt.Errorf("failed to start TLS: %v", err)
			}
		}

		if auth != nil {
			if err := client.Auth(auth); err != nil {
				return fmt.Errorf("SMTP authentication failed: %v", err)
			}
		}

		return sm.sendEmailMessage(client, message)
	}
}

func (sm *SyslogMonitor) sendEmailMessage(client *smtp.Client, message string) error {
	// Î∞úÏã†Ïûê ÏÑ§Ï†ï
	if err := client.Mail(sm.emailConfig.From); err != nil {
		return fmt.Errorf("failed to set sender: %v", err)
	}

	// ÏàòÏã†Ïûê ÏÑ§Ï†ï
	for _, to := range sm.emailConfig.To {
		if err := client.Rcpt(to); err != nil {
			return fmt.Errorf("failed to set recipient %s: %v", to, err)
		}
	}

	// Î©îÏãúÏßÄ Ï†ÑÏÜ°
	writer, err := client.Data()
	if err != nil {
		return fmt.Errorf("failed to open data writer: %v", err)
	}
	defer writer.Close()

	_, err = writer.Write([]byte(message))
	if err != nil {
		return fmt.Errorf("failed to write message: %v", err)
	}

	sm.logger.Infof("Email alert sent successfully to %s", strings.Join(sm.emailConfig.To, ","))
	return nil
}

func (sm *SyslogMonitor) processLine(line string) {
	// ÌïÑÌÑ∞ÎßÅ Ï≤¥ÌÅ¨
	if sm.shouldFilter(line) {
		return
	}

	// ÌÇ§ÏõåÎìú Ï≤¥ÌÅ¨
	if !sm.containsKeyword(line) {
		return
	}

	// Í∏∞Î≥∏ Î°úÍ∑∏ ÌååÏã±
	parsed := sm.parseSyslogLine(line)
	
	// Í≥†Í∏â Î°úÍ∑∏ ÌååÏã± (AI Î∂ÑÏÑù ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞)
	var parsedLog *ParsedLog
	if sm.aiEnabled {
		parsedLog = sm.logParser.ParseLog(line)
	}

	// AI Î∂ÑÏÑù ÏàòÌñâ
	var aiResult *AIAnalysisResult
	if sm.aiEnabled && sm.aiAnalyzer != nil {
		aiResult = sm.aiAnalyzer.AnalyzeLog(line, parsed)
		
		// AI Î∂ÑÏÑù Í≤∞Í≥ºÏóê Îî∞Î•∏ ÏïåÎ¶º
		if aiResult.AnomalyScore >= sm.aiAnalyzer.alertThreshold {
			sm.sendAIAlert(aiResult, parsedLog)
		}
	}

	// Î°úÍ∑∏Ïù∏ Ìå®ÌÑ¥ Í∞êÏßÄ (Ïö∞ÏÑ† Ï≤òÎ¶¨)
	if isLogin, loginInfo := sm.detectLoginPattern(line); isLogin {
		sm.logger.WithFields(logrus.Fields{
			"level": "LOGIN",
			"user":  loginInfo["user"],
			"host":  parsed["host"],
			"status": loginInfo["status"],
		}).Infof("User activity detected: %s", loginInfo["status"])

		// Ïä¨Îûô Î°úÍ∑∏Ïù∏ ÏïåÎ¶º Ï†ÑÏÜ°
		if sm.slackConfig.Enabled {
			slackMsg := sm.createLoginSlackMessage(loginInfo, parsed)
			sm.logger.Infof("üí¨ Sending login notification to Slack: %s", loginInfo["user"])
			go func() {
				if err := sm.sendSlackMessage(slackMsg); err != nil {
					sm.logger.Errorf("‚ùå Failed to send Slack login notification: %v", err)
				}
			}()
		}
	}

	// Í≤ΩÍ≥†ÎÇò ÏóêÎü¨ Î†àÎ≤® Í∞êÏßÄ
	lowLine := strings.ToLower(line)
	if strings.Contains(lowLine, "error") || strings.Contains(lowLine, "err") {
		sm.logger.WithFields(logrus.Fields{
			"level": "ERROR",
			"host":  parsed["host"],
			"service": parsed["service"],
		}).Error(parsed["message"])
		
		// ÏóêÎü¨ Î∞úÏÉù Ïãú Ïù¥Î©îÏùº ÏïåÎ¶º Ï†ÑÏÜ°
		if sm.emailConfig.Enabled {
			subject := fmt.Sprintf("[SYSLOG ERROR] %s - %s", parsed["host"], parsed["service"])
			body := fmt.Sprintf("ÏãúÍ∞Ñ: %s\nÌò∏Ïä§Ìä∏: %s\nÏÑúÎπÑÏä§: %s\nÎ©îÏãúÏßÄ: %s\nÏõêÎ≥∏ Î°úÍ∑∏: %s", 
				parsed["timestamp"], parsed["host"], parsed["service"], parsed["message"], line)
			
			sm.logger.Infof("üìß Sending ERROR alert to: %s", strings.Join(sm.emailConfig.To, ", "))
			go func() {
				if err := sm.sendEmail(subject, body); err != nil {
					sm.logger.Errorf("‚ùå Failed to send email alert to %s: %v", strings.Join(sm.emailConfig.To, ", "), err)
				}
			}()
		}

		// ÏóêÎü¨ Ïãú Ïä¨Îûô ÏïåÎ¶ºÎèÑ Ï†ÑÏÜ°
		if sm.slackConfig.Enabled {
			slackMsg := SlackMessage{
				Text:      fmt.Sprintf("üî¥ *ERROR Alert*"),
				IconEmoji: ":rotating_light:",
				Username:  "Syslog Monitor",
				Attachments: []SlackAttachment{
					{
						Color: "danger",
						Title: fmt.Sprintf("Error on %s", parsed["host"]),
						Fields: []SlackField{
							{Title: "Service", Value: parsed["service"], Short: true},
							{Title: "Host", Value: parsed["host"], Short: true},
							{Title: "Message", Value: parsed["message"], Short: false},
						},
						Timestamp: time.Now().Unix(),
					},
				},
			}
			go func() {
				if err := sm.sendSlackMessage(slackMsg); err != nil {
					sm.logger.Errorf("‚ùå Failed to send Slack error alert: %v", err)
				}
			}()
		}
		
	} else if strings.Contains(lowLine, "warn") || strings.Contains(lowLine, "warning") {
		sm.logger.WithFields(logrus.Fields{
			"level": "WARNING",
			"host":  parsed["host"],
			"service": parsed["service"],
		}).Warn(parsed["message"])
		
	} else if strings.Contains(lowLine, "fail") || strings.Contains(lowLine, "critical") {
		sm.logger.WithFields(logrus.Fields{
			"level": "CRITICAL",
			"host":  parsed["host"],
			"service": parsed["service"],
		}).Fatal(parsed["message"])
		
		// ÌÅ¨Î¶¨Ìã∞Ïª¨ ÏóêÎü¨ Î∞úÏÉù Ïãú Ïù¥Î©îÏùº ÏïåÎ¶º Ï†ÑÏÜ°
		if sm.emailConfig.Enabled {
			subject := fmt.Sprintf("[SYSLOG CRITICAL] %s - %s", parsed["host"], parsed["service"])
			body := fmt.Sprintf("üö® CRITICAL ALERT üö®\n\nÏãúÍ∞Ñ: %s\nÌò∏Ïä§Ìä∏: %s\nÏÑúÎπÑÏä§: %s\nÎ©îÏãúÏßÄ: %s\nÏõêÎ≥∏ Î°úÍ∑∏: %s", 
				parsed["timestamp"], parsed["host"], parsed["service"], parsed["message"], line)
			
			sm.logger.Warnf("üö® Sending CRITICAL alert to: %s", strings.Join(sm.emailConfig.To, ", "))
			go func() {
				if err := sm.sendEmail(subject, body); err != nil {
					sm.logger.Errorf("‚ùå Failed to send critical email alert to %s: %v", strings.Join(sm.emailConfig.To, ", "), err)
				}
			}()
		}

		// ÌÅ¨Î¶¨Ìã∞Ïª¨ ÏóêÎü¨ Ïãú Ïä¨Îûô Í∏¥Í∏â ÏïåÎ¶º
		if sm.slackConfig.Enabled {
			slackMsg := SlackMessage{
				Text:      fmt.Sprintf("üö® *CRITICAL ALERT* üö®"),
				IconEmoji: ":warning:",
				Username:  "Syslog Monitor",
				Attachments: []SlackAttachment{
					{
						Color: "#ff0000",
						Title: fmt.Sprintf("CRITICAL ERROR on %s", parsed["host"]),
						Fields: []SlackField{
							{Title: "Service", Value: parsed["service"], Short: true},
							{Title: "Host", Value: parsed["host"], Short: true},
							{Title: "Message", Value: parsed["message"], Short: false},
						},
						Timestamp: time.Now().Unix(),
					},
				},
			}
			go func() {
				if err := sm.sendSlackMessage(slackMsg); err != nil {
					sm.logger.Errorf("‚ùå Failed to send Slack critical alert: %v", err)
				}
			}()
		}
		
	} else {
		sm.logger.WithFields(logrus.Fields{
			"level": "INFO",
			"host":  parsed["host"],
			"service": parsed["service"],
		}).Info(parsed["message"])
	}
}

func (sm *SyslogMonitor) Start() error {
	// syslog ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
	if _, err := os.Stat(sm.logFile); os.IsNotExist(err) {
		if runtime.GOOS == "darwin" {
			// macOS ÏÇ¨Ïö©ÏûêÎ•º ÏúÑÌïú ÏÉÅÏÑ∏Ìïú ÏïàÎÇ¥
			sm.logger.Errorf("‚ùå Î°úÍ∑∏ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: %s", sm.logFile)
			sm.logger.Info("üçé macOSÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î°úÍ∑∏ ÌååÏùºÎì§:")
			
			recommendations := getMacOSLogRecommendations()
			for _, rec := range recommendations {
				if rec == "" {
					sm.logger.Info("")
				} else {
					sm.logger.Infof("   %s", rec)
				}
			}
			
			sm.logger.Info("")
			sm.logger.Info("üí° ÏÇ¨Ïö©Î≤ï ÏòàÏãú:")
			sm.logger.Info("   # ÏÑ§Ïπò Î°úÍ∑∏ Î™®ÎãàÌÑ∞ÎßÅ")
			sm.logger.Info("   ./syslog-monitor -file=/var/log/install.log")
			sm.logger.Info("")
			sm.logger.Info("   # WiFi Î°úÍ∑∏ Î™®ÎãàÌÑ∞ÎßÅ")  
			sm.logger.Info("   ./syslog-monitor -file=/var/log/wifi.log")
			sm.logger.Info("")
			sm.logger.Info("   # Ïã§ÏãúÍ∞Ñ ÏãúÏä§ÌÖú Î°úÍ∑∏ (sudo ÌïÑÏöî)")
			sm.logger.Info("   sudo log stream | ./syslog-monitor -file=/dev/stdin")
			
			return fmt.Errorf("macOSÏóêÏÑúÎäî Îã§Î•∏ Î°úÍ∑∏ ÌååÏùº Í≤ΩÎ°úÎ•º ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî")
		} else {
			return fmt.Errorf("syslog file not found: %s", sm.logFile)
		}
	}

	sm.logger.Infof("Starting syslog monitor for file: %s", sm.logFile)
	
	// AI Î∂ÑÏÑù ÌôúÏÑ±Ìôî Î©îÏãúÏßÄ
	if sm.aiEnabled {
		sm.logger.Infof("ü§ñ AI Î°úÍ∑∏ Î∂ÑÏÑùÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§")
		sm.logger.Infof(sm.aiAnalyzer.GetAnalysisReport())
	}
	
	// ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
	if sm.systemEnabled && sm.systemMonitor != nil {
		sm.logger.Infof("üñ•Ô∏è  ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅÏùÑ ÏãúÏûëÌï©ÎãàÎã§")
		sm.systemMonitor.Start()
		
		// ÏãúÏä§ÌÖú ÏïåÎ¶º Ï≤òÎ¶¨ Í≥†Î£®Ìã¥
		go sm.handleSystemAlerts()
		
		sm.logger.Infof(sm.systemMonitor.GetSystemReport())
	}

	// tailÏùÑ ÏÇ¨Ïö©Ìï¥ ÌååÏùºÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Í∞êÏãú
	t, err := tail.TailFile(sm.logFile, tail.Config{
		Follow: true,
		ReOpen: true,
		Poll:   true,
		Location: &tail.SeekInfo{Offset: 0, Whence: 2}, // ÌååÏùº ÎÅùÏóêÏÑú ÏãúÏûë
	})
	if err != nil {
		return fmt.Errorf("failed to tail file: %v", err)
	}

	// Ï¢ÖÎ£å Ïã†Ìò∏ Ï≤òÎ¶¨
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	sm.logger.Info("Syslog monitor started. Press Ctrl+C to stop.")

	for {
		select {
		case line := <-t.Lines:
			if line.Err != nil {
				sm.logger.Errorf("Error reading line: %v", line.Err)
				continue
			}
			sm.processLine(line.Text)

		case <-sigChan:
			sm.logger.Info("Shutting down syslog monitor...")
			t.Stop()
			return nil
		}
	}
}

// sendAIAlert AI Î∂ÑÏÑù Í≤∞Í≥º ÏïåÎ¶º Ï†ÑÏÜ°
func (sm *SyslogMonitor) sendAIAlert(aiResult *AIAnalysisResult, parsedLog *ParsedLog) {
	// Ïù¥Î©îÏùº ÏïåÎ¶º
	if sm.emailConfig.Enabled {
		subject := fmt.Sprintf("[AI ALERT %s] %s", aiResult.ThreatLevel, "Ïù¥ÏÉÅ ÏßïÌõÑ Í∞êÏßÄ")
		
		body := fmt.Sprintf(`ü§ñ AI Î°úÍ∑∏ Î∂ÑÏÑù Í≤∞Í≥º

ÏúÑÌòë Î†àÎ≤®: %s
Ïù¥ÏÉÅ Ï†êÏàò: %.2f/10
Ïã†Î¢∞ÎèÑ: %.1f%%
Í∞êÏßÄ ÏãúÍ∞Ñ: %s

üìä Î∂ÑÏÑù Í≤∞Í≥º:
- ÏòÅÌñ•Î∞õÎäî ÏãúÏä§ÌÖú: %s

üîÆ ÏòàÏ∏° Í≤∞Í≥º:`,
			aiResult.ThreatLevel,
			aiResult.AnomalyScore,
			aiResult.Confidence*100,
			aiResult.Timestamp.Format("2006-01-02 15:04:05"),
			strings.Join(aiResult.AffectedSystems, ", "),
		)
		
		for _, prediction := range aiResult.Predictions {
			body += fmt.Sprintf(`
- %s (ÌôïÎ•†: %.0f%%, ÏãúÍ∞Ñ: %s)
  ÏòÅÌñ•: %s`, prediction.Event, prediction.Probability*100, prediction.TimeFrame, prediction.Impact)
		}
		
		body += "\n\nüí° Ï∂îÏ≤ú Ï°∞ÏπòÏÇ¨Ìï≠:"
		for _, recommendation := range aiResult.Recommendations {
			body += fmt.Sprintf("\n- %s", recommendation)
		}
		
		if parsedLog != nil {
			body += fmt.Sprintf(`

üìã Î°úÍ∑∏ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:
- Î°úÍ∑∏ ÌÉÄÏûÖ: %s
- Î†àÎ≤®: %s
- Î©îÏãúÏßÄ: %s
- ÏõêÎ≥∏: %s`, parsedLog.LogType, parsedLog.Level, parsedLog.Message, parsedLog.RawLog)
		}
		
		sm.logger.Infof("üö® Sending AI alert to: %s", strings.Join(sm.emailConfig.To, ", "))
		go func() {
			if err := sm.sendEmail(subject, body); err != nil {
				sm.logger.Errorf("‚ùå Failed to send AI alert email: %v", err)
			}
		}()
	}
	
	// Ïä¨Îûô ÏïåÎ¶º
	if sm.slackConfig.Enabled {
		color := "warning"
		if aiResult.AnomalyScore >= 8.0 {
			color = "danger"
		}
		
		fields := []SlackField{
			{Title: "ÏúÑÌòë Î†àÎ≤®", Value: aiResult.ThreatLevel, Short: true},
			{Title: "Ïù¥ÏÉÅ Ï†êÏàò", Value: fmt.Sprintf("%.2f/10", aiResult.AnomalyScore), Short: true},
			{Title: "Ïã†Î¢∞ÎèÑ", Value: fmt.Sprintf("%.1f%%", aiResult.Confidence*100), Short: true},
			{Title: "ÏòÅÌñ• ÏãúÏä§ÌÖú", Value: strings.Join(aiResult.AffectedSystems, ", "), Short: false},
		}
		
		// ÏòàÏ∏° Í≤∞Í≥º Ï∂îÍ∞Ä
		if len(aiResult.Predictions) > 0 {
			predictionText := ""
			for _, prediction := range aiResult.Predictions {
				predictionText += fmt.Sprintf("‚Ä¢ %s (%.0f%%)\n", prediction.Event, prediction.Probability*100)
			}
			fields = append(fields, SlackField{Title: "ÏòàÏ∏°", Value: predictionText, Short: false})
		}
		
		slackMsg := SlackMessage{
			Text:      fmt.Sprintf("ü§ñ *AI Ïù¥ÏÉÅ ÏßïÌõÑ Í∞êÏßÄ* %s", aiResult.ThreatLevel),
			IconEmoji: ":robot_face:",
			Username:  "AI Log Analyzer",
			Attachments: []SlackAttachment{
				{
					Color:     color,
					Title:     "AI Î∂ÑÏÑù Í≤∞Í≥º",
					Fields:    fields,
					Timestamp: time.Now().Unix(),
				},
			},
		}
		
		go func() {
			if err := sm.sendSlackMessage(slackMsg); err != nil {
				sm.logger.Errorf("‚ùå Failed to send AI alert to Slack: %v", err)
			}
		}()
	}
}

// handleSystemAlerts ÏãúÏä§ÌÖú ÏïåÎ¶º Ï≤òÎ¶¨
func (sm *SyslogMonitor) handleSystemAlerts() {
	for alert := range sm.systemMonitor.GetAlertChannel() {
		sm.logger.WithFields(logrus.Fields{
			"level": "SYSTEM_ALERT",
			"type":  alert.Type,
			"value": alert.Value,
		}).Warnf("System alert: %s", alert.Message)
		
		// Ïù¥Î©îÏùº ÏïåÎ¶º
		if sm.emailConfig.Enabled {
			subject := fmt.Sprintf("[SYSTEM ALERT %s] %s", alert.Level, alert.Type)
			
			body := fmt.Sprintf(`üñ•Ô∏è  ÏãúÏä§ÌÖú ÏïåÎ¶º

ÏïåÎ¶º Î†àÎ≤®: %s
ÌÉÄÏûÖ: %s
Î©îÏãúÏßÄ: %s
ÌòÑÏû¨ Í∞í: %.2f
ÏûÑÍ≥ÑÍ∞í: %.2f
ÏãúÍ∞Ñ: %s

üí° Ï∂îÏ≤ú Ï°∞ÏπòÏÇ¨Ìï≠:`,
				alert.Level,
				alert.Type,
				alert.Message,
				alert.Value,
				alert.Threshold,
				alert.Timestamp.Format("2006-01-02 15:04:05"),
			)
			
			for _, suggestion := range alert.Suggestions {
				body += fmt.Sprintf("\n- %s", suggestion)
			}
			
			body += fmt.Sprintf(`

üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú:
- CPU ÏÇ¨Ïö©Î•†: %.1f%%
- Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†: %.1f%%
- Î°úÎìú ÌèâÍ∑†: %.2f`,
				alert.Metrics.CPU.UsagePercent,
				alert.Metrics.Memory.UsagePercent,
				alert.Metrics.LoadAverage.Load1Min,
			)
			
			sm.logger.Infof("üñ•Ô∏è  Sending system alert to: %s", strings.Join(sm.emailConfig.To, ", "))
			go func() {
				if err := sm.sendEmail(subject, body); err != nil {
					sm.logger.Errorf("‚ùå Failed to send system alert email: %v", err)
				}
			}()
		}
		
		// Ïä¨Îûô ÏïåÎ¶º
		if sm.slackConfig.Enabled {
			color := "warning"
			if alert.Level == "CRITICAL" {
				color = "danger"
			} else if alert.Level == "MEDIUM" {
				color = "warning"
			} else {
				color = "good"
			}
			
			fields := []SlackField{
				{Title: "ÏïåÎ¶º Î†àÎ≤®", Value: alert.Level, Short: true},
				{Title: "ÌÉÄÏûÖ", Value: alert.Type, Short: true},
				{Title: "ÌòÑÏû¨ Í∞í", Value: fmt.Sprintf("%.2f", alert.Value), Short: true},
				{Title: "ÏûÑÍ≥ÑÍ∞í", Value: fmt.Sprintf("%.2f", alert.Threshold), Short: true},
				{Title: "CPU", Value: fmt.Sprintf("%.1f%%", alert.Metrics.CPU.UsagePercent), Short: true},
				{Title: "Î©îÎ™®Î¶¨", Value: fmt.Sprintf("%.1f%%", alert.Metrics.Memory.UsagePercent), Short: true},
			}
			
			slackMsg := SlackMessage{
				Text:      fmt.Sprintf("üñ•Ô∏è  *ÏãúÏä§ÌÖú ÏïåÎ¶º* - %s", alert.Message),
				IconEmoji: ":warning:",
				Username:  "System Monitor",
				Attachments: []SlackAttachment{
					{
						Color:     color,
						Title:     fmt.Sprintf("%s Alert", alert.Type),
						Fields:    fields,
						Timestamp: time.Now().Unix(),
					},
				},
			}
			
			go func() {
				if err := sm.sendSlackMessage(slackMsg); err != nil {
					sm.logger.Errorf("‚ùå Failed to send system alert to Slack: %v", err)
				}
			}()
		}
	}
}

// getDefaultLogFile Ïö¥ÏòÅÏ≤¥Ï†úÏóê Îî∞Î•∏ Í∏∞Î≥∏ Î°úÍ∑∏ ÌååÏùº Í≤ΩÎ°ú Î∞òÌôò
func getDefaultLogFile() string {
	switch runtime.GOOS {
	case "darwin": // macOS
		// macOSÏóêÏÑú ÏùºÎ∞òÏ†ÅÏúºÎ°ú Ï†ëÍ∑º Í∞ÄÎä•Ìïú Î°úÍ∑∏ ÌååÏùºÎì§ÏùÑ ÏàúÏÑúÎåÄÎ°ú ÌôïÏù∏
		macOSLogFiles := []string{
			"/var/log/system.log",    // macOS Ï£ºÏöî ÏãúÏä§ÌÖú Î°úÍ∑∏
			"/var/log/install.log",   // ÏÑ§Ïπò Î°úÍ∑∏
			"/var/log/wifi.log",      // WiFi Î°úÍ∑∏
			"/usr/local/var/log/messages", // Homebrew ÌôòÍ≤Ω
		}
		
		for _, logFile := range macOSLogFiles {
			if _, err := os.Stat(logFile); err == nil {
				return logFile
			}
		}
		
		// Í∏∞Î≥∏Í∞íÏúºÎ°ú system.log Î∞òÌôò (Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏïÑÎèÑ)
		return "/var/log/system.log"
		
	case "linux":
		return "/var/log/syslog"
		
	default:
		return "/var/log/syslog"
	}
}

// getMacOSLogRecommendations macOS ÏÇ¨Ïö©ÏûêÎ•º ÏúÑÌïú Î°úÍ∑∏ ÌååÏùº Ï∂îÏ≤ú
func getMacOSLogRecommendations() []string {
	return []string{
		"/var/log/system.log     # Ï£ºÏöî ÏãúÏä§ÌÖú Î°úÍ∑∏ (macOS Monterey Ïù¥Ï†Ñ)",
		"/var/log/install.log    # Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò Î°úÍ∑∏",
		"/var/log/wifi.log       # WiFi Ïó∞Í≤∞ Î°úÍ∑∏",
		"/var/log/kernel.log     # Ïª§ÎÑê Î°úÍ∑∏",
		"/var/log/fsck_hfs.log   # ÌååÏùºÏãúÏä§ÌÖú Ï≤¥ÌÅ¨ Î°úÍ∑∏",
		"",
		"üí° macOS Big Sur/Monterey Ïù¥ÌõÑ:",
		"   sudo log show --predicate 'process == \"kernel\"' --last 1h",
		"   sudo log show --predicate 'eventMessage contains \"error\"' --last 1h",
		"   sudo log stream --predicate 'process == \"syslogd\"'",
	}
}

func main() {
	defaultLogFile := getDefaultLogFile()
	
	var (
		logFile       = flag.String("file", defaultLogFile, "Path to syslog file")
		outputFile    = flag.String("output", "", "Output file for filtered logs (default: stdout)")
		filterList    = flag.String("filters", "", "Comma-separated list of regex filters to exclude")
		keywordList   = flag.String("keywords", "", "Comma-separated list of keywords to include")
		showHelp      = flag.Bool("help", false, "Show help message")
		emailTo       = flag.String("email-to", "", "Email address to send alerts (comma-separated)")
		emailFrom     = flag.String("email-from", "", "Email sender address")
		smtpServer    = flag.String("smtp-server", "", "SMTP server address")
		smtpPort      = flag.String("smtp-port", "", "SMTP server port")
		smtpUser      = flag.String("smtp-user", "", "SMTP username")
		smtpPassword  = flag.String("smtp-password", "", "SMTP password")
		testEmail     = flag.Bool("test-email", false, "Send test email and exit")
		slackWebhook  = flag.String("slack-webhook", "", "Slack webhook URL for notifications")
		slackChannel  = flag.String("slack-channel", "", "Slack channel (default: webhook default)")
		slackUsername = flag.String("slack-username", "Syslog Monitor", "Slack bot username")
		testSlack     = flag.Bool("test-slack", false, "Send test Slack message and exit")
		loginWatch    = flag.Bool("login-watch", false, "Enable login monitoring (SSH, sudo, web)")
		aiEnabled     = flag.Bool("ai-analysis", false, "Enable AI-based log analysis and anomaly detection")
		systemEnabled = flag.Bool("system-monitor", false, "Enable system metrics monitoring (CPU, memory, disk, temperature)")
		_ = flag.String("log-type", "auto", "Log type for parsing (auto, apache, nginx, mysql, postgresql, application)") // Reserved for future use
	)
	flag.Parse()

	// ÌôòÍ≤ΩÎ≥ÄÏàòÏóêÏÑú Ïù¥Î©îÏùº ÏÑ§Ï†ï ÏùΩÍ∏∞
	if *emailTo == "" {
		*emailTo = os.Getenv("SYSLOG_EMAIL_TO")
		if *emailTo == "" {
			// Í∏∞Î≥∏ ÏÑ§Ï†ï: Ïó¨Îü¨ Î™ÖÏóêÍ≤å ÏûêÎèô Ï†ÑÏÜ°
			*emailTo = "robot@lambda-x.ai,enfn2001@gmail.com"
		}
	}
	if *emailFrom == "" {
		*emailFrom = os.Getenv("SYSLOG_EMAIL_FROM")
		if *emailFrom == "" {
			*emailFrom = "enfn2001@gmail.com"
		}
	}
	if *smtpServer == "" {
		*smtpServer = os.Getenv("SYSLOG_SMTP_SERVER")
		if *smtpServer == "" {
			*smtpServer = "smtp.gmail.com"
		}
	}
	if *smtpPort == "" {
		*smtpPort = os.Getenv("SYSLOG_SMTP_PORT")
		if *smtpPort == "" {
			*smtpPort = "587"
		}
	}
	if *smtpUser == "" {
		*smtpUser = os.Getenv("SYSLOG_SMTP_USER")
		if *smtpUser == "" {
			// Í∏∞Î≥∏ SMTP ÏÇ¨Ïö©Ïûê
			*smtpUser = "enfn2001@gmail.com"
		}
	}
	if *smtpPassword == "" {
		*smtpPassword = os.Getenv("SYSLOG_SMTP_PASSWORD")
		if *smtpPassword == "" {
			// Í∏∞Î≥∏ App Password (ÌÖåÏä§Ìä∏ÏóêÏÑú ÏÑ±Í≥µÌïú Í∞í)
			*smtpPassword = "lcsn auno hcqx zozp"
		}
	}
	if *slackWebhook == "" {
		*slackWebhook = os.Getenv("SYSLOG_SLACK_WEBHOOK")
	}
	if *slackChannel == "" {
		*slackChannel = os.Getenv("SYSLOG_SLACK_CHANNEL")
	}
	if *slackUsername == "Syslog Monitor" {
		if env := os.Getenv("SYSLOG_SLACK_USERNAME"); env != "" {
			*slackUsername = env
		}
	}

	if *showHelp {
		fmt.Println("Syslog Monitor - Real-time syslog monitoring service")
		fmt.Println()
		fmt.Println("Usage:")
		fmt.Println("  syslog-monitor [options]")
		fmt.Println()
		fmt.Println("Options:")
		flag.PrintDefaults()
		fmt.Println()
		fmt.Println("Examples:")
		fmt.Println("  # Monitor default syslog with all messages")
		fmt.Println("  ./syslog-monitor")
		fmt.Println()
		fmt.Println("  # Monitor specific file with keyword filtering")
		fmt.Println("  ./syslog-monitor -file=/var/log/auth.log -keywords=failed,error")
		fmt.Println()
		fmt.Println("  # Monitor with output to file and filtering")
		fmt.Println("  ./syslog-monitor -output=monitor.log -filters=systemd,kernel")
		fmt.Println()
		fmt.Println("  # Monitor with default email alerts (multiple recipients)")
		fmt.Println("  ./syslog-monitor")
		fmt.Println()
		fmt.Println("  # Monitor with custom multiple recipients")
		fmt.Println("  ./syslog-monitor -email-to=\"admin@company.com,security@company.com,ops@company.com\"")
		fmt.Println()
		fmt.Println("  # Monitor with email alerts (using command line)")
		fmt.Println("  ./syslog-monitor -email-to=admin@example.com -smtp-user=your@gmail.com -smtp-password=yourapppassword")
		fmt.Println()
		fmt.Println("  # Monitor with email alerts (using environment variables)")
		fmt.Println("  export SYSLOG_EMAIL_TO=\"admin@company.com,security@company.com\"")
		fmt.Println("  export SYSLOG_SMTP_USER=your@gmail.com")
		fmt.Println("  export SYSLOG_SMTP_PASSWORD=yourapppassword")
		fmt.Println("  ./syslog-monitor")
		fmt.Println()
		if runtime.GOOS == "darwin" {
			fmt.Println("  # macOS specific examples")
			fmt.Println("  ./syslog-monitor -file=/var/log/system.log -ai-analysis")
			fmt.Println("  ./syslog-monitor -file=/var/log/install.log -keywords=error")
			fmt.Println("  ./syslog-monitor -file=/var/log/wifi.log -system-monitor")
			fmt.Println("  sudo log stream | ./syslog-monitor -file=/dev/stdin -ai-analysis")
		}
		fmt.Println()
		fmt.Println("  # Test email configuration (multiple recipients)")
		fmt.Println("  ./syslog-monitor -test-email -email-to=\"user1@test.com,user2@test.com\"")
		fmt.Println()
		fmt.Println("  # Slack integration with login monitoring")
		fmt.Println("  ./syslog-monitor -slack-webhook=https://hooks.slack.com/... -login-watch")
		fmt.Println()
		fmt.Println("  # Combined email + Slack alerts")
		fmt.Println("  ./syslog-monitor -slack-webhook=https://hooks.slack.com/... -slack-channel=#alerts")
		fmt.Println()
		fmt.Println("  # Test Slack integration")
		fmt.Println("  ./syslog-monitor -test-slack -slack-webhook=https://hooks.slack.com/...")
		fmt.Println()
		fmt.Println("  # AI-powered log analysis with system monitoring")
		fmt.Println("  ./syslog-monitor -ai-analysis -system-monitor")
		fmt.Println()
		fmt.Println("  # Monitor web server logs with AI analysis")
		fmt.Println("  ./syslog-monitor -file=/var/log/nginx/access.log -log-type=nginx -ai-analysis")
		fmt.Println()
		fmt.Println("  # Database log monitoring with anomaly detection")
		fmt.Println("  ./syslog-monitor -file=/var/log/mysql/error.log -log-type=mysql -ai-analysis")
		fmt.Println()
		fmt.Println("  # Complete monitoring setup")
		fmt.Println("  ./syslog-monitor -ai-analysis -system-monitor -login-watch -slack-webhook=URL")
		fmt.Println()
		fmt.Println("Environment Variables:")
		fmt.Println("  SYSLOG_EMAIL_TO        - Email addresses to send alerts (comma-separated)")
		fmt.Println("  SYSLOG_EMAIL_FROM      - Email sender address")
		fmt.Println("  SYSLOG_SMTP_SERVER     - SMTP server (default: smtp.gmail.com)")
		fmt.Println("  SYSLOG_SMTP_PORT       - SMTP port (default: 587)")
		fmt.Println("  SYSLOG_SMTP_USER       - SMTP username")
		fmt.Println("  SYSLOG_SMTP_PASSWORD   - SMTP password")
		fmt.Println("  SYSLOG_SLACK_WEBHOOK   - Slack webhook URL")
		fmt.Println("  SYSLOG_SLACK_CHANNEL   - Slack channel")
		fmt.Println("  SYSLOG_SLACK_USERNAME  - Slack bot username")
		fmt.Println()
		fmt.Println("Gmail Setup:")
		fmt.Println("  1. Enable 2-Step Verification in your Google Account")
		fmt.Println("  2. Generate App Password at: https://myaccount.google.com/apppasswords")
		fmt.Println("  3. Use the App Password instead of your regular password")
		fmt.Println()
		fmt.Println("Slack Setup:")
		fmt.Println("  1. Create Slack App: https://api.slack.com/apps")
		fmt.Println("  2. Enable Incoming Webhooks")
		fmt.Println("  3. Copy webhook URL and use with -slack-webhook")
		return
	}

	// ÌïÑÌÑ∞ÏôÄ ÌÇ§ÏõåÎìú ÌååÏã±
	var filters []string
	var keywords []string

	if *filterList != "" {
		filters = strings.Split(*filterList, ",")
		for i := range filters {
			filters[i] = strings.TrimSpace(filters[i])
		}
	}

	if *keywordList != "" {
		keywords = strings.Split(*keywordList, ",")
		for i := range keywords {
			keywords[i] = strings.TrimSpace(keywords[i])
		}
	}

	// Î°úÍ∑∏Ïù∏ Î™®ÎãàÌÑ∞ÎßÅÏù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Í¥ÄÎ†® ÌÇ§ÏõåÎìú ÏûêÎèô Ï∂îÍ∞Ä
	if *loginWatch {
		loginKeywords := []string{"sshd", "sudo", "login", "session", "authentication", "accepted", "failed"}
		for _, keyword := range loginKeywords {
			// Ï§ëÎ≥µ Î∞©ÏßÄ
			found := false
			for _, existing := range keywords {
				if strings.ToLower(existing) == strings.ToLower(keyword) {
					found = true
					break
				}
			}
			if !found {
				keywords = append(keywords, keyword)
			}
		}
		fmt.Printf("üîç Added login keywords: %s\n", strings.Join(loginKeywords, ", "))
	}

	// Ïù¥Î©îÏùº ÏÑ§Ï†ï (Í∏∞Î≥∏Í∞íÏúºÎ°ú Ìï≠ÏÉÅ ÌôúÏÑ±Ìôî)
	emailConfig := &EmailConfig{
		SMTPServer: *smtpServer,
		SMTPPort:   *smtpPort,
		Username:   *smtpUser,
		Password:   *smtpPassword,
		From:       *emailFrom,
		Enabled:    true, // Í∏∞Î≥∏Í∞íÏúºÎ°ú Ìï≠ÏÉÅ ÌôúÏÑ±Ìôî
	}

	// Ïù¥Î©îÏùº Ï£ºÏÜå ÌååÏã±
	emails := strings.Split(*emailTo, ",")
	for i := range emails {
		emails[i] = strings.TrimSpace(emails[i])
	}
	emailConfig.To = emails

	// ÏÇ¨Ïö©Ïûê ÏïåÎ¶º
	if (*emailTo == "robot@lambda-x.ai,enfn2001@gmail.com" || *emailTo == "robot@lambda-x.ai" || *emailTo == "enfn2001@gmail.com") && *smtpUser == "enfn2001@gmail.com" {
		fmt.Printf("üìß Email alerts enabled with DEFAULT settings\n")
		fmt.Printf("    üì® Recipients (%d): %s\n", len(emailConfig.To), strings.Join(emailConfig.To, ", "))
		fmt.Printf("    üîë Using built-in Gmail credentials (enfn2001@gmail.com)\n")
		fmt.Printf("    üí° To add more recipients: -email-to=\"user1@example.com,user2@example.com\"\n")
	} else {
		fmt.Printf("üìß Email alerts enabled with CUSTOM settings\n")
		fmt.Printf("    üì® Recipients (%d): %s\n", len(emailConfig.To), strings.Join(emailConfig.To, ", "))
		
		if *smtpUser == "" || *smtpPassword == "" {
			fmt.Println("‚ö†Ô∏è  Warning: SMTP username or password not provided. Email alerts may not work.")
			fmt.Println("    For Gmail, generate an App Password at: https://myaccount.google.com/apppasswords")
			fmt.Println("    Use: ./email-setup.sh for easy configuration")
		}
	}

	// Ïä¨Îûô ÏÑ§Ï†ï
	slackConfig := &SlackConfig{
		WebhookURL: *slackWebhook,
		Channel:    *slackChannel,
		Username:   *slackUsername,
		Enabled:    *slackWebhook != "",
	}

	if slackConfig.Enabled {
		fmt.Printf("üí¨ Slack alerts enabled\n")
		fmt.Printf("    üì° Webhook: %s\n", slackConfig.WebhookURL[:50]+"...")
		if slackConfig.Channel != "" {
			fmt.Printf("    üì∫ Channel: %s\n", slackConfig.Channel)
		}
		fmt.Printf("    ü§ñ Bot Name: %s\n", slackConfig.Username)
	} else {
		fmt.Printf("üí¨ Slack alerts disabled. Use -slack-webhook to enable.\n")
	}

	if *loginWatch {
		fmt.Printf("üëÅÔ∏è  Login monitoring enabled (SSH, sudo, web login detection)\n")
	}
	
	// AI Î∂ÑÏÑù ÏÉÅÌÉú Î©îÏãúÏßÄ
	if *aiEnabled {
		fmt.Printf("ü§ñ AI log analysis enabled\n")
		fmt.Printf("    üîç Anomaly detection and prediction\n")
		fmt.Printf("    üìä Pattern recognition and threat assessment\n")
		fmt.Printf("    üéØ Supported log types: apache, nginx, mysql, postgresql, application\n")
	} else {
		fmt.Printf("ü§ñ AI analysis disabled. Use -ai-analysis to enable.\n")
	}
	
	// ÏãúÏä§ÌÖú Î™®ÎãàÌÑ∞ÎßÅ ÏÉÅÌÉú Î©îÏãúÏßÄ
	if *systemEnabled {
		fmt.Printf("üñ•Ô∏è  System monitoring enabled\n")
		fmt.Printf("    üìà CPU, memory, disk, temperature monitoring\n")
		fmt.Printf("    ‚ö†Ô∏è  Real-time alerts for system thresholds\n")
		fmt.Printf("    üîÑ 5-minute monitoring interval\n")
	} else {
		fmt.Printf("üñ•Ô∏è  System monitoring disabled. Use -system-monitor to enable.\n")
	}

	// ÌÖåÏä§Ìä∏ Ïä¨Îûô Ï†ÑÏÜ°
	if *testSlack {
		if !slackConfig.Enabled {
			fmt.Println("Error: Slack webhook URL required for test")
			fmt.Println("Please provide -slack-webhook")
			os.Exit(1)
		}

		fmt.Println("Sending test Slack message...")
		
		monitor := NewSyslogMonitor(*logFile, *outputFile, filters, keywords, emailConfig, slackConfig, *aiEnabled, *systemEnabled)
		
		testMsg := SlackMessage{
			Text:      "üß™ *Test Message from Syslog Monitor*",
			IconEmoji: ":test_tube:",
			Username:  slackConfig.Username,
			Attachments: []SlackAttachment{
				{
					Color: "good",
					Title: "Syslog Monitor Test",
					Fields: []SlackField{
						{Title: "Status", Value: "‚úÖ Working", Short: true},
						{Title: "Time", Value: time.Now().Format("2006-01-02 15:04:05"), Short: true},
						{Title: "Features", Value: "Email alerts, Login monitoring, Error detection", Short: false},
					},
					Timestamp: time.Now().Unix(),
				},
			},
		}

		if err := monitor.sendSlackMessage(testMsg); err != nil {
			fmt.Printf("Test Slack message failed: %v\n", err)
			fmt.Println("\nTroubleshooting:")
			fmt.Println("1. Check your Slack webhook URL")
			fmt.Println("2. Verify webhook permissions")
			fmt.Println("3. Test webhook manually")
			os.Exit(1)
		}

		fmt.Printf("‚úÖ Test Slack message sent successfully!\n")
		return
	}

	// ÌÖåÏä§Ìä∏ Ïù¥Î©îÏùº Ï†ÑÏÜ°
	if *testEmail {
		if !emailConfig.Enabled {
			fmt.Println("Error: Email configuration required for test email")
			fmt.Println("Please provide -email-to and SMTP credentials")
			os.Exit(1)
		}

		fmt.Println("Sending test email...")
		
		monitor := NewSyslogMonitor(*logFile, *outputFile, filters, keywords, emailConfig, slackConfig, *aiEnabled, *systemEnabled)
		subject := "[TEST] Syslog Monitor Email Test"
		body := fmt.Sprintf(`Ïù¥Í≤ÉÏùÄ syslog Î™®ÎãàÌÑ∞Ïùò ÌÖåÏä§Ìä∏ Ïù¥Î©îÏùºÏûÖÎãàÎã§.

ÌÖåÏä§Ìä∏ ÏãúÍ∞Ñ: %s
SMTP ÏÑúÎ≤Ñ: %s:%s
Î∞úÏã†Ïûê: %s
ÏàòÏã†Ïûê: %s

Ïù¥ Ïù¥Î©îÏùºÏùÑ Î∞õÏúºÏÖ®Îã§Î©¥ Ïù¥Î©îÏùº ÏÑ§Ï†ïÏù¥ Ïò¨Î∞îÎ•¥Í≤å Íµ¨ÏÑ±ÎêòÏóàÏäµÎãàÎã§.

Syslog Monitor
`, time.Now().Format("2006-01-02 15:04:05"), *smtpServer, *smtpPort, *emailFrom, strings.Join(emailConfig.To, ", "))

		if err := monitor.sendEmail(subject, body); err != nil {
			fmt.Printf("Test email failed: %v\n", err)
			fmt.Println("\nTroubleshooting:")
			fmt.Println("1. Check your Gmail App Password")
			fmt.Println("2. Ensure 2-Step Verification is enabled")
			fmt.Println("3. Verify SMTP server and port settings")
			os.Exit(1)
		}

		fmt.Printf("‚úÖ Test email sent successfully to %d recipients: %s\n", len(emailConfig.To), strings.Join(emailConfig.To, ", "))
		return
	}

	// Í∞êÏãú ÏÑúÎπÑÏä§ ÏÉùÏÑ± Î∞è ÏãúÏûë
	monitor := NewSyslogMonitor(*logFile, *outputFile, filters, keywords, emailConfig, slackConfig, *aiEnabled, *systemEnabled)
	
	if err := monitor.Start(); err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}
} 